### Create a new trip
POST http://localhost:8000/trips
Accept: application/json
Content-Type: application/json
Authorization: token

{
  "route_id": 1,
  "car_id": 1
}

> {%
    const required = {
        "id": 3,
        "car_id": 1,
        "user_id": 2,
        "route_id": 1,
        "finished_at": null
    };

    const tmp = Object.assign({}, response.body);
    delete tmp["started_at"]

    let result = true
    result &= JSON.stringify(required) == JSON.stringify(tmp);
    result &= (new Date() - Date.parse(response.body["started_at"])) < 10000

    client.assert(response.status == 200)
    client.assert(result)

    client.global.set("started_at", response.body["started_at"])
 %}

### Validate the user balance has been updated
GET http://localhost:8000/users/me
Accept: application/json
Content-Type: application/json
Authorization: token

> {%
    client.assert(response.body["balance"] < 1000)
 %}

### Create a new trip with zero balance
POST http://localhost:8000/trips
Accept: application/json
Content-Type: application/json
Authorization: token2

{
  "route_id": 1,
  "car_id": 1
}

> {%
    client.assert(response.status == 400)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "trip_too_expensive",
        "message": "The <User id=3 balance=0.0> cannot afford <Trip price=15.1845>"
    }))
%}

### Search for the finished trips
POST http://localhost:8000/trips/find
Accept: application/json
Content-Type: application/json
Authorization: token

{
  "finished": true
}

> {%
    client.assert(response.status == 200)
    client.assert(JSON.stringify(response.body) == JSON.stringify([
        {
            "id": 1,
            "car_id": 1,
            "user_id": 2,
            "route_id": 1,
            "started_at": "2024-12-14T00:00:00",
            "finished_at": "2024-12-14T00:10:00"
        },
        {
            "id": 2,
            "car_id": 2,
            "user_id": 2,
            "route_id": 1,
            "started_at": "2024-12-14T00:02:00",
            "finished_at": "2024-12-14T00:08:00"
        }
    ]))
%}

### Finish an existing trip
POST http://localhost:8000/trips/3/finish
Accept: application/json
Content-Type: application/json
Authorization: token

{}

> {%
    const required = {
        "id": 3,
        "car_id": 1,
        "user_id": 2,
        "route_id": 1,
        "started_at": client.global.get("started_at")
    };

    const tmp = Object.assign({}, response.body);
    delete tmp["finished_at"]

    let result = true
    result &= JSON.stringify(required) == JSON.stringify(tmp);
    result &= (new Date() - Date.parse(response.body["finished_at"])) < 4000

    client.assert(response.status == 200)
    client.assert(result)
%}

### Try to close already closed trip
POST http://localhost:8000/trips/3/finish
Accept: application/json
Content-Type: application/json
Authorization: token

{}

> {%
    client.assert(response.status == 400)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "trip_already_finished",
        "message": "The <Trip id=3> has already been finished"
    }))
%}

### Finish unexisting trip
POST http://localhost:8000/trips/-1/finish
Accept: application/json
Content-Type: application/json
Authorization: token

{}

> {%
    client.assert(response.status == 404)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "trip_not_found",
        "message": "The <Trip id=-1> was not found"
    }))
%}

### Finish an existing trip without aunthorization
POST http://localhost:8000/trips/1/finish
Accept: application/json
Content-Type: application/json
Authorization:

{}

> {%
    client.assert(response.status == 401)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "unauthorized",
        "message": "The token '' is not owned by any user"
    }))
%}

### Read an existing trip
GET http://localhost:8000/trips/1
Accept: application/json
Content-Type: application/json
Authorization: token

### Read unexisting trip
GET http://localhost:8000/trips/-1
Accept: application/json
Content-Type: application/json
Authorization: token

> {%
    client.assert(response.status == 404)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "trip_not_found",
        "message": "The <Trip id=-1> was not found"
    }))
%}

### Read an existing trip without authorization
GET http://localhost:8000/trips/-1
Accept: application/json
Content-Type: application/json
Authorization:

> {%
    client.assert(response.status == 401)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "unauthorized",
        "message": "The token '' is not owned by any user"
    }))
%}
