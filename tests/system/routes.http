### Create a new route (and ensure that the route distance does not fluctuate)
POST http://localhost:8000/routes
Accept: application/json
Content-Type: application/json

{
  "start_address": "Soborna 1",
  "end_address": "Soborna 10"
}

> {%
    client.assert(response.status == 200)
    client.assert(Number.isInteger(response.body["id"]))
    client.assert(response.body["start_address"] == "Soborna 1")
    client.assert(response.body["end_address"] == "Soborna 10")
    client.assert(response.body["distance_kilometers"] == 0.831)
    client.assert(!Number.isNaN(parseFloat(response.body["mean_time_minutes"])))
%}

### Refresh the route (and ensure that the route distance does not fluctuate)
POST http://localhost:8000/routes/1/refresh
Accept: application/json
Content-Type: application/json

{}

> {%
    client.assert(response.status == 200)
    client.assert(Number.isInteger(response.body["id"]))
    client.assert(response.body["start_address"] == "Soborna 1")
    client.assert(response.body["end_address"] == "Soborna 10")
    client.assert(response.body["distance_kilometers"] == 0.831)
    client.assert(!Number.isNaN(parseFloat(response.body["mean_time_minutes"])))
%}


### Refresh unexisting route
POST http://localhost:8000/routes/-1/refresh
Accept: application/json
Content-Type: application/json

{}

> {%
    client.assert(response.status == 404)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "route_not_found",
        message: "The <Route id=-1> was not found"
    }))
%}