### Test not-found exception
GET http://localhost:8000/not-found

> {%
    client.assert(response.status == 404)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "not_found",
        message: "The page 'http://localhost:8000/not-found' was not found on this server"
    }))
%}

### Test unauthorized exception
GET http://localhost:8000/users/me
Authorization: empty

> {%
    client.assert(response.status == 401)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "unauthorized",
        message: "The token 'empty' is not owned by any user"
    }))
%}

### Test unexisting method
POST http://localhost:8000/users/me
Content-Type: application/json

{}

> {%
    client.assert(response.status == 405)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "method_not_allowed",
        message: "The method 'POST' is not allowed for 'http://localhost:8000/users/me'"
    }))
%}

### Test bad request body
POST http://localhost:8000/users
Content-Type: application/json

{}

> {%
    client.assert(response.status == 422)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "bad_request",
        message: [
            {
                type: "Field required",
                field: "body/username",
                input: {}
            },
            {
                type: "Field required",
                field: "body/password",
                input: {}
            }
        ]
    }))
%}

### Test request body that is not a JSON
POST http://localhost:8000/users

{}

> {%
    client.assert(response.status == 422)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        "type": "bad_request",
        "message": [
            {
                "type": "Input should be a valid dictionary or object to extract fields from",
                "field": "body",
                "input": "{}"
            }
        ]
    }))
%}

### Test bad request headers
GET http://localhost:8000/users/me

> {%
    client.assert(response.status == 422)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "bad_request",
        message: [
            {
                type: "Field required",
                field: "header/authorization",
                input: null
            }
        ]
    }))
%}

### Test service-error capturing
POST http://localhost:8000/users
Accept: application/json
Content-Type: application/json

{
    "username": "u7i",
    "password": "qwerty2"
}

> {%
    client.assert(response.status == 400)
    client.assert(JSON.stringify(response.body) == JSON.stringify({
        type: "user_already_exists",
        message: "The <User username=u7i> already exists"
    }))
%}